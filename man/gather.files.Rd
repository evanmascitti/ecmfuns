% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gather.files.r
\name{gather.files}
\alias{gather.files}
\title{\lifecycle{experimental}}
\usage{
gather.files(tabbed_directory = " ", filetype = " ")
}
\arguments{
\item{tabbed_directory}{The quoted directory in which the files reside, as
understood from the auto-complete hosted in R Studio. For .Rmd files this is
a relative path from the directory housing the .Rmd file.}

\item{filetype}{a quoted file extension, \strong{without} the "." Be
sure to use correct capitalization for the file type of interest.}
}
\value{
A named character vector of file paths to read. The element names are
the file name with the directories and file extension stripped.
}
\description{
Prepare a set of files to be iteratively read into R
}
\details{
This is a helper function to remove friction when reading multiple data files
in one step. Using \code{list.files()} is not intuitive for reading files because it
returns only the base file name and none of the parent directories. A standard
method would require a \code{paste()} or \code{paste0()} call to concatenate the root path
and the base file name.

\code{gather.files()} reduces opacity and eyesore during this common task. It
leverages the functionality of \code{list.files()} with the \code{str_sub()} function from
\strong{stringr} to remove both the parent directory and the file
extensions from the names assigned upon import.

This function is designed to be used with the pipe (\verb{\%>\%}) from
\strong{magrittr} and two additional functions: \itemize{ \item{\code{map()} in the
\strong{purrr} package, which allows the read-in operation to be performed
for all files in one step} \item{a user-supplied function, such as
\code{read_csv()} for comma-delimited value files or \code{vcgImport()} for 3D mesh
files} .}

A recommended step to complete this pipeline is to call
\code{tibble::enframe()} after the \verb{map(<reading function>)} call. This condenses
the list to a nested tibble, with each file as a row. Optionally, use the
\code{value} argument inside the call to \code{enframe()} to add a useful description
to what the file (i.e. value) actually is. Because \code{gather.files} provides
human-friendly names to its elements, there should not be a need to adjust
the \code{name} argument inside \code{enframe()}.
}
\examples{
\dontrun{
gather.files(
tabbed_directory= "data/raw_data/2020-10-25_Atterberg_limits",
filetype= "csv") \%>\%
map(read_csv) \%>\%
enframe(value= "raw_data_file") }
}
